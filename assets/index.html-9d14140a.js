import{_ as o,r as p,o as c,c as l,a as n,b as e,d as s,e as t}from"./app-401df53f.js";const i={},r=n("h1",{id:"创建服务",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#创建服务","aria-hidden":"true"},"#"),s(" 创建服务")],-1),u=n("p",null,"对于web开发者，服务端最重要的能力就是提供接口(API)给客户端调用，这也是框架重点发力的一个环节。通过安装特定的插件，我们就能快速地实现接口能力",-1),d=n("h2",{id:"安装",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#安装","aria-hidden":"true"},"#"),s(" 安装")],-1),k={href:"https://www.npmjs.com/package/@aomex/web",target:"_blank",rel:"noopener noreferrer"},m=n("img",{src:"https://img.shields.io/npm/v/@aomex/web?logo=npm&label=@aomex/web",alt:"npm"},null,-1),v={href:"https://www.npmjs.com/package/@aomex/router",target:"_blank",rel:"noopener noreferrer"},b=n("img",{src:"https://img.shields.io/npm/v/@aomex/router?logo=npm&label=@aomex/router",alt:"npm"},null,-1),h=t(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">pnpm</span> <span class="token function">add</span> @aomex/core @aomex/web @aomex/router
<span class="token function">pnpm</span> <span class="token function">add</span> typescript @types/node <span class="token parameter variable">-D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="脚本命令" tabindex="-1"><a class="header-anchor" href="#脚本命令" aria-hidden="true">#</a> 脚本命令</h2>`,2),g=n("code",null,"@aomex/web",-1),_={href:"https://www.npmjs.com/package/ts-node",target:"_blank",rel:"noopener noreferrer"},w=t(`<div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token comment">// package.json</span>
<span class="token punctuation">{</span>
  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;start&quot;</span><span class="token operator">:</span> <span class="token string">&quot;aomex-ts-node src/index.ts&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;dependencies&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="监听端口" tabindex="-1"><a class="header-anchor" href="#监听端口" aria-hidden="true">#</a> 监听端口</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// src/index.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> middleware <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@aomex/core&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> WebApp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@aomex/web&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 挂载中间件</span>
app<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span>
  middleware<span class="token punctuation">.</span><span class="token function">web</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ctx<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">&#39;Hello world&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 启动node服务</span>
app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Server started&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着在终端输入命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">pnpm</span> start
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,5),x={href:"http://localhost:3000",target:"_blank",rel:"noopener noreferrer"},f=n("code",null,"Hello world",-1),y=t("<p>但是等等，我们找到了一个未知的东西<code>middleware.web</code>。这我得解释一下，<code>middleware.pure</code>的意思就是纯粹，它的context不依赖于任何一个应用平台，所以别妄想它会提示什么有用的TS类型给你。而<code>middleware.web</code>是定制的，它携带了<strong>app</strong>、<strong>request</strong>、<strong>response</strong> 等与web平台相关的属性和方法（在类型提示方面）。因此，如果不是制作通用的适用于各个应用的中间件，我建议你最好使用定制的中间件。</p><ul><li>common -&gt; middleware.pure</li><li><strong>web</strong>         -&gt; middleware.web</li><li><strong>console</strong>   -&gt; middleware.console</li></ul>",2);function q(j,N){const a=p("ExternalLinkIcon");return c(),l("div",null,[r,u,d,n("p",null,[n("a",k,[m,e(a)]),n("a",v,[b,e(a)])]),h,n("p",null,[g,s("内置了"),n("a",_,[s("ts-node"),e(a)]),s("，因此可以直接运行.ts文件")]),w,n("p",null,[s("打开浏览器访问："),n("a",x,[s("http://localhost:3000"),e(a)]),s("，不出意外你能看见一行文字"),f,s("。 恭喜，服务已经启动，等下我就告诉你如何写接口。")]),y])}const A=o(i,[["render",q],["__file","index.html.vue"]]);export{A as default};
