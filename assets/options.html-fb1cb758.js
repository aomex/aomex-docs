import{_ as n,o as s,c as a,e as p}from"./app-168c6b82.js";const t={},e=p(`<h1 id="接收参数" tabindex="-1"><a class="header-anchor" href="#接收参数" aria-hidden="true">#</a> 接收参数</h1><p>虽然命令行是在内部执行的，不存在黑客和无聊的人捣乱，但是难免会有一些粗心的开发者写错单词或者少传参数，因此框架提供了参数接收神器<code>options</code></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// ./src/commanders/say.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> rule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@aomex/core&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> options <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@aomex/console&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Commander <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@aomex/commander&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> commander <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Commander</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

commander<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">&#39;schedule&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  mount<span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token function">options</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      machineId<span class="token operator">:</span> rule<span class="token punctuation">.</span><span class="token function">int</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      reload<span class="token operator">:</span> rule<span class="token punctuation">.</span><span class="token function">boolean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">default</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token doc-comment comment">/**
   * ctx类型自动推导
   * options: <span class="token punctuation">{</span> machineId: number; reload: boolean; <span class="token punctuation">}</span>
   */</span>
  <span class="token keyword">async</span> <span class="token function">action</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> machineId<span class="token punctuation">,</span> reload <span class="token punctuation">}</span> <span class="token operator">=</span> ctx<span class="token punctuation">.</span>options<span class="token punctuation">;</span>
    <span class="token comment">// 逻辑</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着指令可以这么写：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>npx aomex schedule <span class="token parameter variable">--machineId</span> <span class="token number">23</span>
npx aomex schedule <span class="token parameter variable">--machineId</span> <span class="token number">105</span> <span class="token parameter variable">--reload</span>
</code></pre></div><h2 id="别名" tabindex="-1"><a class="header-anchor" href="#别名" aria-hidden="true">#</a> 别名</h2><p>如果你觉得参数名太长了，可以为参数设置短别名</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token function">options</span><span class="token punctuation">(</span>
  <span class="token punctuation">{</span>
    machineId<span class="token operator">:</span> rule<span class="token punctuation">.</span><span class="token function">int</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    reload<span class="token operator">:</span> rule<span class="token punctuation">.</span><span class="token function">boolean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">default</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    machineId<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;i&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    reload<span class="token operator">:</span> <span class="token string">&#39;r&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>设置了别名，原来的参数名也可以继续使用。</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>npx aomex schedule <span class="token parameter variable">--id</span> <span class="token number">23</span> <span class="token parameter variable">--reload</span>
npx aomex schedule <span class="token parameter variable">-i</span> <span class="token number">105</span> <span class="token parameter variable">-r</span>
</code></pre></div><h2 id="no-前缀" tabindex="-1"><a class="header-anchor" href="#no-前缀" aria-hidden="true">#</a> --no-前缀</h2><p>参数名如果加上了<code>--no-</code>前缀，则代表它的值是false，而且我们在逻辑中不需要关心这个前缀</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>npx aomex schedule <span class="token parameter variable">--reload</span>     <span class="token comment"># reload=true</span>
npx aomex schedule --no-reload  <span class="token comment"># reload=false</span>
</code></pre></div><h2 id="传递对象" tabindex="-1"><a class="header-anchor" href="#传递对象" aria-hidden="true">#</a> 传递对象</h2><p>很抱歉，命令行只能传递字符串。但其实也有办法解决，因为<code>对象验证器</code>有一个方法叫做<code>parseFromString()</code>，好家伙，一起试试嘛</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>commander<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">&#39;schedule&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  mount<span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token function">options</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      user<span class="token operator">:</span> rule
        <span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
          id<span class="token operator">:</span> rule<span class="token punctuation">.</span><span class="token function">int</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
          name<span class="token operator">:</span> rule<span class="token punctuation">.</span><span class="token builtin">string</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">parseFromString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token function">action</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>options<span class="token punctuation">.</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着执行这么一段指令。</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>npx aomex schedule <span class="token parameter variable">--user</span> <span class="token string">&#39;{&quot;id&quot;:1,&quot;name&quot;:&quot;bill&quot;}&#39;</span>
</code></pre></div><p>办法总是比困难多，欢呼吧！</p>`,19),o=[e];function c(i,l){return s(),a("div",null,o)}const r=n(t,[["render",c],["__file","options.html.vue"]]);export{r as default};
