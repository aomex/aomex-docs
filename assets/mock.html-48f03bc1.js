import{_ as n,o as s,c as a,f as t}from"./app-3e488607.js";const p={},e=t(`<h1 id="模拟命令行" tabindex="-1"><a class="header-anchor" href="#模拟命令行" aria-hidden="true">#</a> 模拟命令行</h1><p>还记得创建入口时的一行代码吗？它的作用就是接收命令行并找到和执行相应的指令</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">await</span> app<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>现在我要告诉你的是，你不需要在命令行里填写参数也能执行指令。比如这样：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">await</span> app<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token string">&#39;schedule&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;--id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;25&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;--reload&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>居然把参数写在了代码里，有趣。但仔细想想似乎和直接用命令行传入区别不大？如果是在入口这么写的话确实意义不大，而且我们还把参数固定死了，何必呢？</p><p>如果是用在指令逻辑里呢？或者是用在中间件里呢？</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>commander<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">&#39;schedule-1&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token keyword">async</span> <span class="token function">action</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 逻辑...</span>
    <span class="token keyword">const</span> code1 <span class="token operator">=</span> <span class="token keyword">await</span> ctx<span class="token punctuation">.</span>app<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token string">&#39;schedule-2&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;--test&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> code2 <span class="token operator">=</span> <span class="token keyword">await</span> ctx<span class="token punctuation">.</span>app<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token string">&#39;schedule-3&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;--test&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;--next&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>思路一下子就打开了吧，不通过命令行就能执行其他指令，这种方式在一些复杂的场景下特别有用。官方插件<code>@aomex/cron</code>就是利用了这个特性才使得运行定时任务可以不依赖操作系统。</p>`,9),c=[e];function o(i,l){return s(),a("div",null,c)}const r=n(p,[["render",o],["__file","mock.html.vue"]]);export{r as default};
