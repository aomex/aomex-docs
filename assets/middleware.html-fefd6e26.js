import{_ as n,o as s,c as a,f as t}from"./app-b2056342.js";const p="/assets/middleware-a42ffa4f.jpg",e={},o=t('<h1 id="中间件" tabindex="-1"><a class="header-anchor" href="#中间件" aria-hidden="true">#</a> 中间件</h1><p>用过express或者koa的开发者，对中间件肯定是耳熟能详的。其中koa的中间件因为采用<code>洋葱模型</code>而广受业界好评，受此熏陶，aomex亦采用与koa同样的中间件逻辑</p><img src="'+p+`" height="350"><h2 id="第一个中间件" tabindex="-1"><a class="header-anchor" href="#第一个中间件" aria-hidden="true">#</a> 第一个中间件</h2><p>记住，aomex是一个对TypeScript类型有执念的框架，我们不允许写代码没有提示，所以接下来让我们牛刀小试：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> middleware <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@aomex/core&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> firstMiddleware <span class="token operator">=</span> middleware<span class="token punctuation">.</span><span class="token function">pure</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;enter&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;exit&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// PureMiddleware&lt;object&gt;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>firstMiddleware<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>很显然，<code>ctx</code>和<code>next</code>都是已经处于有类型的变量，你在回调函数中可以愉快地写着业务逻辑。如果此时你想带些成果给外部使用呢？我们可以这么干</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> middleware <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@aomex/core&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">FirstMiddlewareProps</span> <span class="token punctuation">{</span>
  result<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  <span class="token function">remark</span><span class="token punctuation">(</span>newValue<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> firstMiddleware <span class="token operator">=</span> middleware<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">pure</span><span class="token generic class-name"><span class="token operator">&lt;</span>FirstMiddlewareProps<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>
  <span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token string">&#39;final result&#39;</span><span class="token punctuation">;</span>
    ctx<span class="token punctuation">.</span>result <span class="token operator">=</span> result<span class="token punctuation">;</span>
    ctx<span class="token punctuation">.</span><span class="token function-variable function">remark</span> <span class="token operator">=</span> <span class="token punctuation">(</span>newValue<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      result <span class="token operator">=</span> newValue<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// PureMiddleware&lt;FirstMiddlewareProps&gt;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>firstMiddleware<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们发现中间件泛型上填充了一个自定义的接口类型，这是专门为外部环境准备的。当我们讲到应用环节时，它的威力才会被真正地展示出来。但是我们不妨提前透露一下</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> middleware <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@aomex/core&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Router <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@aomex/router&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> firstMiddleware <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../middleware/pure.middleware&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/api&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  mount<span class="token operator">:</span> <span class="token punctuation">[</span>
    firstMiddleware
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token keyword">async</span> <span class="token function-variable function">action</span><span class="token operator">:</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    ctx<span class="token punctuation">.</span>result<span class="token punctuation">;</span>   <span class="token comment">// string</span>
    ctx<span class="token punctuation">.</span>remark<span class="token punctuation">;</span>   <span class="token comment">// (newValue: string): void</span>
    ctx<span class="token punctuation">.</span>whatever<span class="token punctuation">;</span> <span class="token comment">// 类型报错！它不属于这里</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>嗯！控制器内十分精准的类型提示，兴奋的飞起吧。这种<code>智能提示</code>的设计思路贯穿了整个框架。</p><blockquote><p>感谢微软和它开源的的TypeScript语言</p></blockquote><h2 id="执行顺序" tabindex="-1"><a class="header-anchor" href="#执行顺序" aria-hidden="true">#</a> 执行顺序</h2><p>正如开头看到的那张图，中间件遵循洋葱模型，从左边往右依次执行，接着从右往左反向执行。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> compose <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@aomex/core&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> a <span class="token operator">=</span> middleware<span class="token punctuation">.</span><span class="token function">pure</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> b <span class="token operator">=</span> middleware<span class="token punctuation">.</span><span class="token function">pure</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> c <span class="token operator">=</span> middleware<span class="token punctuation">.</span><span class="token function">pure</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 执行中间件</span>
<span class="token keyword">const</span> context <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token function">compose</span><span class="token punctuation">(</span><span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>能猜出日志输出顺序吗？我就不卖关子了：<strong>1 3 5 6 4 2</strong>。<br> 细心的朋友已经发现<code>await next()</code>这一行了，它的作用其实就是在等后面的中间件全部执行完，然后再执行当前中间件剩下的逻辑（洋葱的右半部分）。而且注意一定要加上<code>await</code>关键词，否则next后面的逻辑会立即执行。</p><h2 id="链条" tabindex="-1"><a class="header-anchor" href="#链条" aria-hidden="true">#</a> 链条</h2><p>中间件使用方式就是挂载到应用入口或者路由上的，但是对于TS项目有一个致命缺陷，就是挂载到应用入口的中间件，路由逻辑无法静态探测。</p><div class="language-diff line-numbers-mode" data-ext="diff"><pre class="language-diff"><code>const app = new App();
<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">app.mount(middlewareA); // PureMiddleware&lt;{ data1: string }&gt;
</span></span>
const router = new Router();
router.get(&#39;/api&#39;, {
<span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line"> mount: [middlewareA],
</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> action(ctx) {
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   ctx.data1; // 类型报错！
</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> },
</span></span>});

app.mount(router);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了彻底解决这个问题，aomex另辟蹊径，设计出链条的概念。链条的本质就是<code>中间件容器</code>，你可以把它想象成一条真正的锁链，每个铁环上都挂着一个物件。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> chain <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@aomex/core&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> a<span class="token operator">:</span> PureMiddleware<span class="token operator">&lt;</span><span class="token punctuation">{</span> data1<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> b<span class="token operator">:</span> PureMiddleware<span class="token operator">&lt;</span><span class="token punctuation">{</span> data2<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> c<span class="token operator">:</span> PureMiddleware<span class="token operator">&lt;</span><span class="token punctuation">{</span> data3<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>

<span class="token comment">// 包含中间件：a,b</span>
<span class="token keyword">const</span> appChain <span class="token operator">=</span> chain<span class="token punctuation">.</span>pure<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 包含中间件：a,b,c</span>
<span class="token keyword">const</span> businessChain <span class="token operator">=</span> appChain<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// ------------------------------- //</span>

<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span>appChain<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/api&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  mount<span class="token operator">:</span> <span class="token punctuation">[</span>businessChain<span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token function">action</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ctx<span class="token punctuation">.</span>data1<span class="token punctuation">;</span> <span class="token comment">// string</span>
    ctx<span class="token punctuation">.</span>data2<span class="token punctuation">;</span> <span class="token comment">// number</span>
    ctx<span class="token punctuation">.</span>data3<span class="token punctuation">;</span> <span class="token comment">// boolean</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span>router<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>完美提示！！ 注意看，在创建链条时，我们创建了两个变量<code>appChain</code>和<code>businessChain</code>，接着appChain被挂载到了应用入口，而businessChain被挂载到了路由。现在我们看看这里包含的3个中间件分别是怎么分配的：</p><ul><li>a -&gt; 全局中间件</li><li>b -&gt; 全局中间件</li><li>c -&gt; 路由中间件</li></ul><p>怎么做到的？其实<code>appChain</code>和<code>businessChain</code>是拥有相同根节点的链条，前者是后者的子集。当链条的一部分被挂载到app上时，这部分的尾巴就会被打上一个<code>标识位(flag)</code>，而标识位后面部分的链条，才真正属于路由。</p><div class="language-text" data-ext="text"><pre class="language-text"><code>     入口       标识位               路由
╭─────┴────╮    ↓     ╭───────────┴───────────╮
a --------&gt; b --------&gt; c --------&gt; d --------&gt; e
╰─────┬────╯
   appChain
╰──────────────────────┬───────────────────────╯
                  routerChain
</code></pre></div>`,25),c=[o];function i(l,u){return s(),a("div",null,c)}const k=n(e,[["render",i],["__file","middleware.html.vue"]]);export{k as default};
